#!/bin/bash

convert_dep() {
  case "$1" in
    "*>=*")
       local DEPNAME="${1%%>=*}"
       local DEPVER="${1##*>=}"
       echo ">=${DEPNAME}-${DEPVER}"
       ;;
    "*<=*")
       local DEPNAME="${1%%<=*}"
       local DEPVER="${1##*<=}"
       echo "<=${DEPNAME}-${DEPVER}"
       ;;
    "*=*")
       local DEPNAME="${1%%=*}"
       local DEPVER="${1##*=}"
       echo "=${DEPNAME}-${DEPVER}"
       ;;
    *) echo "$DEP" ;;
  esac
}
 
pkg_convert_arch() {
  msg_start_nnl "converting ${1}..."
  
  pkg_create_tmp
  local ARCHLINUX=$TMP/arch
  local DECEBAL=$TMP/decebal
  local RETVAL NAME VERSION ARCH RELEASE DESC URL LICENSE INDEX
  
  msg_verbose_nnl "creating needed directories..."
  cp $1 $TMP && cd $TMP
  mkdir -p arch decebal
  msg_done_verbose
  
  msg_verbose_nnl "unpacking ${1}..."
  tar -C $TMP/arch -zxf $1 2>/dev/null
  if [ $? -ne 0 ]
  then
    msg_failed_verbose
    msg_failed
    msg_error "could not extract $1."
    pkg_exit "pkg_convert_arch()" "unpack_the_arch_package" "$LINENO" 1
  fi
  msg_done_verbose
  
  msg_verbose_nnl "creating package database entry..."
  NAME="$(grep ^'pkgname =' $ARCHLINUX/.PKGINFO)"
  NAME="${NAME##*=}"
  NAME="${NAME:1}"
  VERANDREL="$(grep ^'pkgver =' $ARCHLINUX/.PKGINFO)"
  VERANDREL="${VERANDREL##*=}"
  VERANDREL="${VERANDREL:1}"
  VERSION="${VERANDREL%%-*}"
  RELEASE="${VERANDREL##*-}"
  URL="$(grep ^'url =' $ARCHLINUX/.PKGINFO)"
  URL="${URL##*=}"
  URL="${URL:1}"
  DESC="$(grep ^'pkgdesc =' $ARCHLINUX/.PKGINFO)"
  DESC="${DESC##*=}"
  LICENSE="$(grep ^'license =' $ARCHLINUX/.PKGINFO)"
  LICENSE="${LICENSE##*=}"
  LICENSE="${LICENSE:1}"
  BUILDDATE="$(grep ^'builddate =' $ARCHLINUX/.PKGINFO)"
  BUILDDATE="${BUILDDATE##*=}"
  BUILDDATE="${BUILDDATE:1}"
  CSIZE="$(grep ^'size =' $ARCHLINUX/.PKGINFO)"
  CSIZE="${CSIZE##*=}"
  CSIZE="${CSIZE:1}"
  CSIZE="$(expr $CSIZE / 1024)K"
  ARCH="$(grep ^'arch =' $ARCHLINUX/.PKGINFO)"
  ARCH="${ARCH##*=}"
  ARCH="${ARCH:1}"
  
  DEPENDS="$(grep ^'depend =' $ARCHLINUX/.PKGINFO)"
  if [ -n "DEPENDS" ]
  then
    DEPENDS="${DEPENDS##*=}"
    DEPENDS="${DEPENDS:1}"
    local INDEX=0
    > $DECEBAL/.DEPENDS
    for DEP in $(echo -e $DEPENDS)
    do
      echo "DEPENDS[$INDEX]=\"$(convert_dep $DEP)\"" >> $DECEBAL/.DEPENDS
      INDEX=$(($INDEX + 1))
    done
  fi
  
  INDEX=0
  > $DECEBAL/.FILES
  for FILE in $(cat $ARCHLINUX/.FILELIST)
  do
    echo "FILES[$INDEX]=\"$FILE\"" >> $DECEBAL/.FILES
    INDEX=$(($INDEX + 1))
  done
  
  if [ -f $ARCHLINUX/.INSTALL ]
  then
    sed -i "s:^op=\$1::" $ARCHLINUX/.INSTALL
    sed -i "s:^shift$::" $ARCHLINUX/.INSTALL
    sed -i "s:^\$op \$\*::" $ARCHLINUX/.INSTALL
    mv $ARCHLINUX/.INSTALL $DECEBAL/.INSTALL
  fi
  
  rm -f $ARCHLINUX/{.FILELIST,.PKGINFO}
  
  USIZE=$(du -cbh $ARCHLINUX | tail -n 1 | awk '{print $1}')
    
  echo "# Generated by pkg_convert ($(date))" > $DECEBAL/.INFO
  echo "NAME=$NAME" >> $DECEBAL/.INFO
  echo "VERSION=$VERSION" >> $DECEBAL/.INFO
  echo "ARCH=$ARCH" >> $DECEBAL/.INFO
  echo "RELEASE=$RELEASE" >> $DECEBAL/.INFO
  echo "URL=\"$URL\"" >> $DECEBAL/.INFO
  echo "DESC=\"$DESC\"" >> $DECEBAL/.INFO
  echo "LICENSE=\"$LICENSE\"" >> $DECEBAL/.INFO
  echo "GROUP=$GROUP" >> $DECEBAL/.INFO
  echo "BUILDDDATE=\"$BUILDDATE\"" >> $DECEBAL/.INFO
  echo "USIZE=\"$USIZE\"" >> $DECEBAL/.INFO
  msg_done_verbose
  
  msg_verbose_nnl "moving data files..."  
  mv $ARCHLINUX/* $DECEBAL/
  if [ $? -ne 0 ]
  then
    msg_verbose_failed
    msg_failed
    msg_error "unexpected error while moving the arch data files."
    pkg_exit "pkg_convert_arch()" "move_the_binary_files" "$LINENO" 1
  fi
  msg_done_verbose
  
  cd $DECEBAL
  if [ -d usr/man ]
  then
    msg_verbose_nnl "move man files..."
    mkdir -p usr/share/man
    mv usr/man/* usr/share/man/
    rm -rf usr/man
    msg_done_verbose
  fi
  if [ -d usr/info ]
  then
    msg_verbose_nnl "move info files..."
    mkdir -p usr/share/info
    mv usr/info/* usr/share/info/
    rm -rf usr/info
    msg_verbose_done
  fi

  if [ -d usr/doc ]
  then
    msg_verbose_nnl "move doc files..."
    mkdir -p usr/share/doc
    mv usr/doc/* usr/share/doc/
    rm -rf usr/doc
    msg_verbose_done
  fi

  msg_verbose_nnl "creating package $NAME-$VERSION-$ARCH-$RELEASE.tbz2..."
  
  HAS_INSTALL=$(ls -a $DECEBAL | grep ".INSTALL")
  HAS_DEPENDS=$(ls -a $DECEBAL | grep ".DEPENDS")
  HAS_CONFLICTS=$(ls -a $DECEBAL | grep ".CONFLICTS")
  HAS_PROVIDES=$(ls -a $DECEBAL | grep ".PROVIDES")
  HAS_REPLACES=$(ls -a $DECEBAL | grep ".REPLACES")
  HAS_BACKUPS=$(ls -a $DECEBAL | grep ".BACKUPS")
  HAS_DESC=$(ls -a $DECEBAL | grep ".DESCRIPTION")
		
  ( cd $DECEBAL
    tar jcf $BASEDIR/$NAME-$VERSION-$ARCH-$RELEASE.tbz2 $HAS_INSTALL \
      $HAS_DEPENDS $HAS_CONFLICTS $HAS_PROVIDES $HAS_REPLACES $HAS_BACKUPS \
      $HAS_DESC .FILES .INFO * >/dev/null 2>&1 )
  if [ $? -eq 0 ]
  then
    msg_done_verbose
  else
    msg_failed_verbose
    msg_failed
    msg_error "there was an error while creating package $NAME-$VERSION-$ARCH-$RELEASE.tbz2 (tar failed)."
    pkg_exit "pkg_rebuild()" "create_package" "$LINENO" 1
  fi
 
  pkg_remove_tmp							        
  msg_ok       
}
