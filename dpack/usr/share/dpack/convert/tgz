#!/bin/bash

pkg_convert_crux() {
  msg_start_nnl "converting ${1}..."
  
  pkg_create_tmp
  
  local SLACKWARE=$TMP/slackware
  local DECEBAL=$TMP/decebal
  local RETVAL NAME VERSION ARCH RELEASE DESC URL LICENSE INDEX ALL
  
  msg_verbose_nnl "creating needed directories..."
  cp $1 $TMP/ && cd $TMP
  mkdir -p slackware decebal
  msg_done_verbose

  msg_verbose_nnl "unpacking ${1}..."
  tar -C $TMP/slackware -zxf $1 2>/dev/null
  if [ $? -ne 0 ]
  then
    msg_failed_verbose
    msg_failed
    msg_error "could not extract $1."
    pkg_exit "pkg_convert_arch()" "unpack_the_arch_package" "$LINENO" 1
  fi
  msg_done_verbose

  msg_verbose_nnl "creating package database entry..."
  			    	  
  ALL="${1%%.tgz}"
  NAME="$(pkgname $ALL)"
  VERSION="$(pkgversion $ALL)"
  RELEASE="$(pkgrelease $ALL)"
  ARCH="$(pkgarch $ALL)"
  
  > $DECEBAL/.INFO
  echo "# Generated by pkg_convert ($1) $(date)" >> $DECEBAL/.INFO
  echo "NAME=$NAME" >> $DECEBAL/.INFO
  echo "VERSION=$VERSION" >> $DECEBAL/.INFO
  echo "ARCH=$ARCH" >> $DECEBAL/.INFO
  echo "RELEASE=$RELEASE" >> $DECEBAL/.INFO
  
  INDEX=0
  ( cd $SLACKWARE
     tar cvf /dev/null * | sort > $DECEBAL/FILES )
  > $DECEBAL/.FILES
  while read LINE
  do
    if [ ! "$LINE" = "FILES" ]
    then
      echo "FILES[$INDEX]=\"$LINE\"" >> $DECEBAL/.FILES
      INDEX=$(($INDEX + 1))
    fi
  done < $DECEBAL/FILES
  rm -f $DECEBAL/FILES
  
  msg_verbose_nnl "moving data files..."
  mv $SLACKWARE/* $DECEBAL
  if [ $? -eq 0 ]
  then
    msg_done_verbose
  else
    msg_failed_verbose
    msg_failed
    msg_error "could not move the deb data files."
    pkg_exit "pkg_convert_deb()" "move_the_deb_data_files" "$LINENO" 1
  fi

  msg_verbose_nnl "creating package $NAME-$VERSION-$ARCH-$RELEASE.tbz2..."
  
  HAS_INSTALL=$(ls -a $DECEBAL | grep ".INSTALL")
  HAS_DEPENDS=$(ls -a $DECEBAL | grep ".DEPENDS")
  HAS_CONFLICTS=$(ls -a $DECEBAL | grep ".CONFLICTS")
  HAS_PROVIDES=$(ls -a $DECEBAL | grep ".PROVIDES")
  HAS_REPLACES=$(ls -a $DECEBAL | grep ".REPLACES")
  HAS_BACKUPS=$(ls -a $DECEBAL | grep ".BACKUPS")
  HAS_DESC=$(ls -a $DECEBAL | grep ".DESCRIPTION")
		
  ( cd $DECEBAL
    tar jcf $BASEDIR/$NAME-$VERSION-$ARCH-$RELEASE.tbz2 $HAS_INSTALL \
      $HAS_DEPENDS $HAS_CONFLICTS $HAS_PROVIDES $HAS_REPLACES $HAS_BACKUPS \
      $HAS_DESC .FILES .INFO * >/dev/null 2>&1 )
  if [ $? -eq 0 ]
  then
    msg_done_verbose
  else
    msg_failed_verbose
    msg_failed
    msg_error "there was an error while creating package $NAME-$VERSION-$ARCH-$RELEASE.tbz2 (tar failed)."
    pkg_exit "pkg_rebuild()" "create_package" "$LINENO" 1
  fi
						      
  pkg_remove_tmp
  msg_ok
}
  					   